import java.io.*;
import java.util.*;

public class Graph{
	private final int Vsize; //number of vertices
	private int Esize;
	Map<V,ArrayList<E>> Gmap;
	
	public Graph(String file) throws FileNotFoundException,IOException { 
		 BufferedReader br = new BufferedReader(new FileReader(file));
		 this.Vsize=Integer.parseInt(br.readLine());
		 this.Esize=Integer.parseInt(br.readLine());
		 System.out.println("Vsize= "+this.Vsize+" and Esize= " +this.Esize);
		 String current=null;
		 Gmap= new HashMap<V,ArrayList<E>>();
		 while((current=br.readLine())!=null){ 
			String[] vals =current.split(" ");
			int u=Integer.parseInt(vals[0]); //source
			int v=Integer.parseInt(vals[1]); //destination
		       	
			if(Gmap.get(u)==null)
				{
				   Gmap.put(new V(u),new ArrayList<E>());
				   Gmap.get(new V(u)).add(addEdge(u,v,0));
				}
			else{ 
		        	    Gmap.get(new V(u)).add(addEdge(u,v,0));
			    } 
		  
		 }
		 
		 
	} 
	
	public E addEdge(int u , int v, int w ) { 
		if(u<0 || u<0)  throw new IndexOutOfBoundsException();
		else return new E(v,w);
		
	} 
	public void printGraph(){ 
		for(Integer k:Gmap.keySet()){ 
			System.out.print(k);
			if(Gmap.get(k)!=null){
			    for(E e:Gmap.get(k)){ 
				  System.out.print(" -- " + e.v);
				}  
			System.out.println();
			}
		}
	}

	public void DFS1(V node){ 
		Stack<V> s = new Stack<V>();
		s.push(node);
		node.visited=true;
		while(!s.isEmpty()){
		       V cur = s.pop();
		       System.out.println(cur.u);
		       for(E e: Gmap.get(cur)){ 
				if(e.v.visited!=true){ 
					s.push(e.v);
					e.v.visited=true;
				 }
			   }
		      }
	}  



	public static void main(String args[]) throws IOException{
		 if(args[0]==null) System.out.println("no file given");

		 else {
	  	 	Graph graph = new Graph(args[0]);
			graph.printGraph();
        	      }
	} 

	
}

class V{ 
     public int u; 
     public boolean visited; 
     public V(int u){ 
	    this.u=u
	 }
} 

class E{
        public V v; //to represent u->v
	public int w; //weight
	public E(int v, int w){ 
	        this.v=new V(v);
		this.w=w;
	} 
}

